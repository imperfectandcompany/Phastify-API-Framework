-- Table structure for table `devices`
DROP TABLE IF EXISTS `devices`;
CREATE TABLE `devices` (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_id` int(11) UNSIGNED NOT NULL,
  `device_name` varchar(255) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `first_login` timestamp NULL DEFAULT NULL,
  `last_login` timestamp NULL DEFAULT NULL,
  `is_logged_in` tinyint(1) NOT NULL DEFAULT '0',
  `expired` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `fk_devices_user_id` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Table structure for table `activity_log`
DROP TABLE IF EXISTS `activity_log`;
CREATE TABLE `activity_log` (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_id` int(11) UNSIGNED NOT NULL,
  `action` varchar(255) NOT NULL,
  `activity_data` json DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `location` json DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `action_index` (`action`),
  CONSTRAINT `fk_activity_log_user_id` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Table structure for table `device_ips`
DROP TABLE IF EXISTS `device_ips`;
CREATE TABLE `device_ips` (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `device_id` int(11) UNSIGNED NOT NULL,
  `ip_address` varchar(45) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `device_id` (`device_id`),
  CONSTRAINT `fk_device_ips_device_id` FOREIGN KEY (`device_id`) REFERENCES `devices` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Table structure for table `login_logs`
DROP TABLE IF EXISTS `login_logs`;
CREATE TABLE `login_logs` (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_id` int(11) UNSIGNED NOT NULL,
  `device_id` int(11) UNSIGNED NOT NULL,
  `ip_address` varchar(45) NOT NULL,
  `timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `success` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `device_id` (`device_id`),
  CONSTRAINT `fk_login_logs_user_id` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_login_logs_device_id` FOREIGN KEY (`device_id`) REFERENCES `devices` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Table structure for table `login_tokens`
DROP TABLE IF EXISTS `login_tokens`;
CREATE TABLE `login_tokens` (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `token` char(64) DEFAULT NULL,
  `user_id` int(11) UNSIGNED NOT NULL,
  `device_id` int(11) UNSIGNED NOT NULL,
  `expiration_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `token` (`token`),
  KEY `user_id` (`user_id`),
  KEY `device_id` (`device_id`),
  CONSTRAINT `fk_login_tokens_user_id` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_login_tokens_device_id` FOREIGN KEY (`device_id`) REFERENCES `devices` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  UNIQUE INDEX `unique_device_id` (`device_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Stand-in structure for view `user_login_history`
DROP VIEW IF EXISTS `user_login_history`;
CREATE TABLE `user_login_history` (
  `Username` varchar(32),
  `Login Timestamp` timestamp,
  `IP Address` varchar(45),
  `Login Success` tinyint(1)
);

-- Structure for view `user_login_history`
DROP TABLE IF EXISTS `user_login_history`;
CREATE ALGORITHM=UNDEFINED DEFINER=`igfastdl`@`localhost` SQL SECURITY DEFINER VIEW `user_login_history` AS
SELECT `u`.`username` AS `Username`, `l`.`timestamp` AS `Login Timestamp`, `l`.`ip_address` AS `IP Address`, `l`.`success` AS `Login Success`
FROM `login_logs` `l`
JOIN `users` `u` ON (`l`.`user_id` = `u`.`id`);

-- Stored procedure for cleaning up old activity logs to prevent the table from growing too large
DELIMITER $$
CREATE PROCEDURE `CleanupActivityLog` ()
BEGIN
    DELETE FROM `activity_log` WHERE `created_at` <= DATE_SUB(NOW(), INTERVAL 90 DAYS);
END$$
DELIMITER ;

-- Stored procedure for updating the status of users who have not been active for 15 minutes
DELIMITER $$
CREATE PROCEDURE `UpdateUserStatus` ()
BEGIN
    UPDATE `users` SET `status` = 'offline' WHERE TIMESTAMPDIFF(MINUTE, `updatedAt`, NOW()) > 15;
END$$
DELIMITER ;

-- Stored procedure for deleting expired login tokens
DELIMITER $$
CREATE PROCEDURE `DeleteExpiredTokens` ()
BEGIN
    DELETE FROM `login_tokens` WHERE `token_expiration` <= NOW();
END$$
DELIMITER ;

-- Stored procedure for deleting expired login devices and performing any necessary logging
DELIMITER $$
CREATE PROCEDURE `DeleteExpiredLoginDevices` ()
BEGIN
    DECLARE expired_cursor CURSOR FOR
        SELECT `id`, `user_id`
        FROM `user_settings`
        WHERE `device_name` IS NOT NULL AND `login_token_expiration` <= NOW();

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN expired_cursor;
    expired_loop: LOOP
        FETCH expired_cursor INTO @device_id, @user_id;
        IF done THEN
            LEAVE expired_loop;
        END IF;

        -- Perform any necessary logging or data retention here
        -- Insert data into an audit log table, for example

        -- Delete the expired login device record
        DELETE FROM `user_settings` WHERE `id` = @device_id;

        -- Also update user's last login device or other relevant information
        -- UPDATE `users` SET `last_login_device` = @device_id WHERE `id` = @user_id;
    END LOOP;

    CLOSE expired_cursor;
END$$
DELIMITER ;

future adjustment, enum every possible activity_type
CREATE TABLE `activity_logs` (
  `log_id` INT AUTO_INCREMENT PRIMARY KEY,
  `user_id` INT,
  `activity_type` ENUM('login', 'reactivation', ...),
  `timestamp` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  -- Other relevant columns
  FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`)
);

associate user location with post
SELECT p.*, l.location_name
FROM `posts` p
JOIN `users` u ON p.`user_id` = u.`user_id`
JOIN `locations` l ON u.`location_id` = l.`location_id`;

retrieve locations associated with a specific user
SELECT locations.*
FROM locations
INNER JOIN user_locations ON locations.id = user_locations.location_id
WHERE user_locations.user_id = [user_id];

CREATE TABLE `role_permissions` (
  `role_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`role_id`, `permission_id`)
);

CREATE TABLE `blocked_users` (
  `user_id` int(11) NOT NULL,
  `blocked_user_id` int(11) NOT NULL,
  PRIMARY KEY (`user_id`, `blocked_user_id`)
);


makes me admin
- Check if the "admin" role exists, and if not, insert it
INSERT INTO roles (name, createdAt, updatedAt)
VALUES ('admin', NOW(), NOW())
ON DUPLICATE KEY UPDATE name=name;

-- Get the ID of the "admin" role
SET @adminRoleId = LAST_INSERT_ID();

-- Assign the "admin" role to your user ID
INSERT INTO user_roles (user_id, role_id, createdAt, updatedAt)
VALUES (12, @adminRoleId, NOW(), NOW())
ON DUPLICATE KEY UPDATE role_id=role_id;

CREATE TABLE search_queries (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    query TEXT NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id),
    INDEX idx_user_id (user_id)
);

CREATE TABLE search_results (
    id INT AUTO_INCREMENT PRIMARY KEY,
    result_type VARCHAR(50) NOT NULL, -- Example: 'post', 'comment', 'reply', 'user', 'integration'
    result_id INT NOT NULL, -- The ID of the corresponding item in the respective table
    description TEXT,
    INDEX idx_result_type (result_type),
    INDEX idx_result_id (result_id)
);

CREATE TABLE search_logs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    query_id INT NOT NULL,
    result_id INT NOT NULL,
    action VARCHAR(20) NOT NULL, -- Example: 'click'
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (query_id) REFERENCES search_queries(id),
    FOREIGN KEY (result_id) REFERENCES search_results(id),
    INDEX idx_user_id (user_id),
    INDEX idx_query_id (query_id),
    INDEX idx_result_id (result_id),
    INDEX idx_timestamp (timestamp)
);
